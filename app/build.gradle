import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:22.1.1'
}

android {
    compileSdkVersion 22
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "com.pjwin.ndkstudy"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        ndk {
            moduleName "ndk_study"
            ldLibs "log"
            ldLibs "z",  "jnigraphics"
            //cFlags "-std=c++11 -fexceptions"
            //stl "gnustl_shared"
            //abiFilters "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable = true
            jniDebuggable = true
        }
    }

    /*sourceSets {
        main {
            jniLibs.srcDirs 'src/main/libs'
            jni.srcDirs = []
            //jni.srcDirs = ['src/main/jni'] //disable automatic ndk-build
        }
    }
*/
    /*sourceSets {
        main {
            //manifest.srcFile 'src/main/AndroidManifest.xml'
            //java.srcDirs = ['src/main/java']
            // resources.srcDirs = ['src/main/']
            //aidl.srcDirs = ['src/main/']
            //renderscript.srcDirs = ['src/main/']
            //res.srcDirs = ['src/main/res']
            //assets.srcDirs = ['src/main/assets']
            jni.srcDirs = [] //disable automatic ndk-build call
            jniLibs.srcDir 'src/main/libs'
            //['src/main/jni', ]
        }
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    task ndkBuild(type: Exec) {
        //System.out.println(getNdkBuildCmd())
        workingDir file('src/main/')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('src/main/jni')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative*/
}


def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}
